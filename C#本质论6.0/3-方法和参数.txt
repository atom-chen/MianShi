1.命名空间
命名空间是一种分类机制，用于组合功能相关的所有类型，命名空间是分级的。
System :包含基元类型，以及类型转换，数学计算等
System.Collections :用于处理对象集合（比如列表和字典）的类型
System.Collections.Generics :包含使用泛型的强类型集合

2.用方法进行重构
将一组相关语句转移到一个方法中，而不是把它们留在要给较大的方法中，这是重构的一种形式。
重构有助于减少重复代码，还有助于增强代码的可读性。

3.using指令
using System; //Console.WriteLine();
即使存在using System这样的指令，也不能在使用System的某个子命名空间中的类型时省略System，比如System.Text下的StringBuilder，就必须添加using System.Text;

利用using 指令为命名空间或类型取一个别名，别名的作用有：可以消除两个同名类型的歧义，还可以缩写长名称
using Timer = System.Timers.Timer;

4.引用参数ref和输出参数out
如果参数被标记为out，编译器会核实在方法所有正常返回路径中，是否都对该参数及进行了赋值，如果没有，就会报错。
可以通过声明一个或多个out参数来克服方法只有一个返回值的限制。
ref和out都是传地址

5.参数数组
参数数组的声明方式：在方法声明的最后一个参数之前添加params关键字，并将最后一个参数声明为数组。
注意：参数数组不一定是方法的唯一参数，但一定是最后一个参数，所以方法最多有一个参数数组。
参数数组是类型安全的--实参的类型必须兼容参数数组中元素的类型。

6.可选参数和命名参数
可选参数：声明方法时为参数指定常量作为默认值，调用时可以不必再指定参数值
可选参数一定要放在所有必须参数的后面
命名参数：在调用方法时，利用命名参数，调用者可以显示为一个参数赋值，而不是只根据参数顺序来赋值。

7.用异常实现基本错误处理
try块内为可能出现异常的代码，catch块内尝试处理异常，处理异常的顺序非常重要，catch块必须按照从最具体到最不具体排列，只要控制离开try块，finally块就会执行。
要优先使用try/finally而不是try/catch块来实现资源清理代码。
要尽量在抛出的异常中描述异常为什么会发生。

Exception类，所有的异常类型都派生自System.Exception，所以都可以用catch(System.Exception exception)块进行处理。
最好是用一个专门的catch块处理更具体的派生类型。
throw引发异常：如果引发一个异常，会使执行从异常的引发位置跳转到与第一个匹配异常的catch块。

规范：避免使用异常处理预料之中的情况。


1.进程间通信
每个进程各自有不同的用户地址空间,任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核,在内核中开辟一块缓冲区,进程A把数据从用户空间拷到内核缓冲区,进程B再从内核缓冲区把数据读走,内核提供的这种机制称为进程间通信。

2.匿名管道
2.1管道的创建
管道是由调用pipe函数来创建。
int pipe (int fd[2]);
fd参数返回两个文件描述符,fd[0]指向管道的读端,fd[1]指向管道的写端。fd[1]的输出是fd[0]的输入。
2.2管道如何实现进程间的通信
（1）父进程创建管道，得到两个文件描述符指向管道的两端
（2）父进程fork出子进程，子进程也有两个文件描述符指向同一管道。
（3）父进程关闭fd[0],子进程关闭fd[1]，即父进程关闭管道读端,子进程关闭管道写端（因为管道只支持单向通信）。父进程可以往管道口写,进程可以从管道口读,管道是由环形队列实现的,数据从写端流入从读端流出,这样就实现了进程间通信。 

3.总结： 
如果一个管道的写端一直在写，而读端的引用计数是否大于0决定管道是否会堵塞，引用计数大于0，只写不读再次调用write会导致管道堵塞； 
如果一个管道的读端一直在读，而写端的引用计数是否大于0决定管道是否会堵塞，引用计数大于0，只读不写再次调用read会导致管道堵塞； 
而当他们的引用计数等于0时，只写不读会导致写端的进程收到一个SIGPIPE信号，导致进程终止，只写不读会导致read返回0,就像读到文件末尾一样。

2.5管道特点

1.管道只允许具有血缘关系的进程间通信，如父子进程间的通信。

2.管道只允许单向通信。

3.管道内部保证同步机制，从而保证访问数据的一致性。

4.面向字节流

5.管道随进程，进程在管道在，进程消失管道对应的端口也关闭，两个进程都消失管道也消失。
1.模板定义：模板是一组函数或类的参数实现。
模板就是实现代码重用机制的一种工具，它可以实现类型参数化，即把类型定义为参数， 从而实现了真正的代码可重用性。模版可以分为两类，一个是函数模版，另外一个是类模版。

需要注意的是：模板并不是可执行的代码，而是用于生成代码的蓝图或配方。在程序中，如果一个模板从来没有被使用过，那么它将会被编译器忽略，不会生成可执行代码，这时，即使模板里包含一些编程错误，程序依然可以正常编译和运行。只有当模板用于生成代码时，模板才会被编译，错误才能被编译器识别。

2.函数模板的写法
函数模板的一般形式如下：
Template <class或者也可以用typename T>

返回类型 函数名（形参表）
{//函数定义体 }
说明： template是一个声明模板的关键字，表示声明一个模板关键字class不能省略，如果类型形参多余一个 ，每个形参前都要加class <类型 形参表>可以包含基本数据类型可以包含类类型.

3. 类模板的写法
定义一个类模板：
Template < class或者也可以用typename T >
class类名｛
／／类定义．．．．．．
｝;
说明：其中，template是声明各模板的关键字，表示声明一个模板，模板参数可以是一个，也可以是多个。

4.模板特化：任何针对模板参数进一步进行条件限制设计的特化版本。
全特化就是全部特化，即针对所有的模板参数进行特化。
偏特化就是部分特化，即针对部分模板参数进行特化。

5.模板的实例化：从模板生成的函数或类的定义是模板的实例化
分为：显示实例化和隐式实例化
隐式实例化：由编译器根据输入参数来判断类型参数T的类型。
但是当函数的两个输入参数类型不同时，需要明确指出模板类型参数。因为编译器会在推断T的类型时产生多义性，就会出错。
所以在使用模板时，还是尽量使用显式的实例化。
1. 显示实例化
为什么要显示实例化？
主要是提高效率，当显式实例化模板时，在使用模板之前，编译器根据显式实例化指定的类型生成模板实例
2. 隐式实例化
隐式实例化指的是：在使用模板之前，编译器不生成模板的声明和定义实例。只有当使用模板时，编译器才根据模板定义生成相应类型的实例。
3. 特化(=具体化)、偏特化
具体化必须对模板进行重新定义。
1.函数定义：sizeof是何方神圣sizeof乃C/C++中的一个操作符（operator）是也，简单的说其作
用就是返回一个对象或者类型所占的内存字节数。

2.sizeof有三种语法形式，如下：
  1) sizeof( object ); // sizeof( 对象 );
  2) sizeof( type_name ); // sizeof( 类型 );

3. 基本数据类型的sizeof
这里的基本数据类型指short、int、long、float、double这样的简单内置数据类型，
由于它们都是和系统相关的，所以在不同的系统下取值可能不同，这务必引起我们的注
意，尽量不要在这方面给自己程序的移植造成麻烦。
一般的，在32位编译环境中，sizeof(int)的取值为4。
char        1   1
short       2   2
int         4   4
long        4   4
long long   8   8
float       4   4
double      8   8
long double 8   8
pointer     4   8

5. 指针变量的sizeof
学过数据结构的你应该知道指针是一个很重要的概念，它记录了另一个对象的地址。既
然是来存放地址的，那么它当然等于计算机内部地址总线的宽度。所以在32位计算机中
，一个指针变量的返回值必定是4（注意结果是以字节为单位），在6
4位系统中指针变量的sizeof结果为8。
char* pc = "abc";
int* pi;
string* ps;
char** ppc = &pc;
void (*pf)();// 函数指针
sizeof( pc ); // 结果为4
sizeof( pi ); // 结果为4
sizeof( ps ); // 结果为4
sizeof( ppc ); // 结果为4
sizeof( pf );// 结果为4
指针变量的sizeof值与指针所指的对象没有任何关系，正是由于所有的指针变量所占内
存大小相等，所以MFC消息处理函数使用两个参数WPARAM、LPARAM就能传递各种复杂的消
息结构（使用指向结构体的指针）。

6. 数组的sizeof
数组的sizeof值等于数组所占用的内存字节数，如：
char a1[] = "abc";
int a2[3];
sizeof( a1 ); // 结果为4，字符 末尾还存在一个NULL终止符
sizeof( a2 ); // 结果为3*4=12（依赖于int）
一些朋友刚开始时把sizeof当作了求数组元素的个数，现在，你应该知道这是不对的，
那么应该怎么求数组元素的个数呢Easy，通常有下面两种写法：
int c1 = sizeof( a1 ) / sizeof( char ); // 总长度/单个元素的长度
int c2 = sizeof( a1 ) / sizeof( a1[0] ); // 总长度/第一个元素的长度
写到这里，提一问，下面的c3，c4值应该是多少呢
void foo3(char a3[3])
{
int c3 = sizeof( a3 ); // c3 == 
}
void foo4(char a4[])
{
int c4 = sizeof( a4 ); // c4 == 
}
也许当你试图回答c4的值时已经意识到c3答错了，是的，c3!=3。这里函数参数a3已不
再是数组类型，而是蜕变成指针，相当于char* a3，为什么仔细想想就不难明白，我
们调用函数foo1时，程序会在栈上分配一个大小为3的数组吗不会！数组是“传址”的
，调用者只需将实参的地址传递过去，所以a3自然为指针类型（char*），c3的值也就为
4。

7.类中含有virtual时（无论一个还是多个），内存中就会出现一个虚指针，而指针的大小为4，所以类的大小也是4；
单一继承下，无论父类还是派生类中存在虚函数，派生类中大小都为4（只考虑虚函数，无其他成员），虚函数地址都存在于虚函数指针指向的虚函数表中。
多重继承时，派生类会出现多个虚指针，此时大小就要具体计算了，如图继承两个含有虚函数的基类，派生类中存在两个虚指针，其大小为8。
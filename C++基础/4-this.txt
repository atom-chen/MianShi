1.一个对象的this指针并不是对象本身的一部分，不会影响sizeof(对象)的结果。this作用域是在类内部，当在类的非静态成员函数中访问类的非静态成员的时候，编译器会自动将对象本身的地址作为一个隐含参数传递给函数。也就是说，即使你没有写上this指针，编译器在编译的时候也是加上this的，它作为非静态成员函数的隐含形参，对各成员的访问均通过this进行。

2. this指针的使用: 
一种情况就是，在类的非静态成员函数中返回类对象本身的时候，直接使用 return *this；另外一种情况是当参数与成员变量名相同时，如this->n = n （不能写成n = n）。 

3.this 虽然用在类的内部，但是只有在对象被创建以后才会给 this 赋值。this指针存在于类的成员函数中,指向被调用函数所在的类实例的地址。
this 确实指向了当前对象，而且对于不同的对象，this 的值也不一样。
a.  this 是 const 指针，它的值是不能被修改的，一切企图修改该指针的操作，如赋值、递增、递减等都是不允许的。
b.  this 只能在成员函数内部使用，用在其他地方没有意义，也是非法的。
c.  只有当对象被创建后 this 才有意义，因此不能在 static 成员函数中使用（后续会讲到 static 成员）。

 

4.this在成员函数的开始前构造，在成员函数的结束后清除。 
这个生命周期同任何一个函数的参数是一样的，没有任何区别。 

5.this 实际上是成员函数的一个形参，在调用成员函数时将对象的地址作为实参传递给 this。不过 this 这个形参是隐式的，它并不出现在代码中，而是在编译阶段由编译器默默地将它添加到参数列表中。

this 作为隐式形参，本质上是成员函数的局部变量，所以只能用在成员函数的内部，并且只有在通过对象调用成员函数时才给 this 赋值。
this，它是成员函数和成员变量关联的桥梁。

6.一个类的成员函数在内存中只有一份
假设用一个类定义10个对象：编译系统并不是分别为10个对象的数据成员和成员函数分配存储单元。而是仅为每个对象的数据成员分配存储单元，10个对象的成员函数对应的是同一个函数代码段。不论成员函数在类内定义还是在类外定义，成员函数都用以上方式存储。
其实，在每一个成员函数中都包含一个特殊的指针，这个指针的名字是固定的，称为this， 
它的值是当前被调用的成员函数所在的对象的起始地址。在调用成员函数时，系统隐式地将对象的起始地址传递给成员函数，使this指针得到当前对象的地址。于是在成员函数中对数据成员的引用，就按照this的指向找到对象的数据成员，实现对数据成员的操作。也就是说， 成员函数中数据成员名的前面隐含有“this->” 的指向。
可以将this理解为对象数据成员的封装，在函数调用时，一定要理解当前传入的数据即this是哪一个。
1.虚析构函数是为了解决基类的指针指向派生类对象，并用基类的指针删除派生类对象。如果某个类不包含虚函数，那一般是表示它将不作为一个基类来使用。当一个类不准备作为基类使用时，使析构函数为虚一般是个坏主意。因为它会为类增加一个虚函数表，使得对象的体积翻倍，还有可能降低其可移植性。所以基本的一条是：无故的声明虚析构函数和永远不去声明一样是错误的。实际上，很多人这样总结：当且仅当类里包含至少一个虚函数的时候才去声明虚析构函数。抽象类是准备被用做基类的，基类必须要有一个虚析构函数，纯虚函数会产生抽象类，所以方法很简单：在想要成为抽象类的类里声明一个纯虚析构函数。

2.首先，对于虚析构函数，那就得说下构造函数和析构函数了。

  构造函数：进行初始化成员变量的函数。

  析构函数：在对象生命周期结束的时候，完成资源的回收和清理。

如果我们在设计一个类的时候，没有显示声明定义构造函数，析构函数，则编译器会自动生成。

虚析构函数：只有当一个类被定义为基类的时候，才会把析构函数写成虚析构函数。

  如果我们不需要使用基类对派生类的对象操作时，我们也不必去定义虚析构函数，这样会增加系统的内存开销，当类里面有虚析构函数时，系统会为当前类分配一个虚函数表，里面存放虚函数指针，这样就会增加类的存储空间。关于虚函数表的一些知识，可以访问：http://blog.csdn.net/haoel/article/details/1948051/  。

对于虚析构，就是在析构函数前加virtual关键字，那么到底有什么作用呢？

   防止内存泄露，定义一个基类的指针p，在delete p时，如果基类的析构函数是虚函数，这时只会看p所赋值的对象，如果p赋值的对象是派生类的对象，就会调用派生类的析构函数（毫无疑问，在这之前也会先调用基类的构造函数，在调用派生类的构造函数，然后调用派生类的析构函数，基类的析构函数，所谓先构造的后释放）；如果p赋值的对象是基类的对象，就会调用基类的析构函数，这样就不会造成内存泄露。

   如果基类的析构函数不是虚函数，在delete p时，调用析构函数时，只会看指针的数据类型，而不会去看赋值的对象，这样就会造成内存泄露。
派生类的析构函数用不上，会造成资源的泄漏
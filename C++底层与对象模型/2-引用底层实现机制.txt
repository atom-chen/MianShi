1.引用的本质就是指针。
用引用和指针传递参数无论是在效率上还是在空间上都是完全一样的，只不过二者的接口并不相同，引用的接口有一定的限制。指针可以一对多，而引用却只能一对一，即&refer不能被改变，但却并不能说一对一就是安全的，只不过危险的系数降低罢了。引用比指针更容易控制。举个例子，线性表是一个非常灵活的数据结构，在他上面有许多的操作，然而栈呢，它是一个限制性操作的线性表，它的底层操作实际上是由线性表操作实现的。就好比stack与vector的关系，因此指针和引用的关系就好比线性表和栈的关系，引用也就是受限的指针，它对外的接口和指针虽然并不一样，但底层是相同的。
虽然从语言上看，引用好像不占内存，但是从底层上来看，都占用了内存，创建指针和创建引用的汇编代码几乎完全一样，在栈上分配空间，保存变量x的地址，所有对引用变量r的操作实际都是通过这个地址在操作x。。

2.本质上，引用和指针没有区别。只不过在语言层面上，C++设计者将通过指针来操作引用的实现细节隐藏了。不过，我们依然可以肯定： 
（1）定义一个引用就是定义一个指针，这个指针保存引用对象的地址，且指针类型为const，不可以再指向其他对象； 
（2）每次对引用变量的使用，实际都伴随着解引用，知识我们看不到符号*；
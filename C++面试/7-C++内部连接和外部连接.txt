1.声明
一个声明将一个名称引入一个作用域;
在c++中，在一个作用域中重复一个声明是合法的
以下都是声明：  
int foo(int,int); //函数前置声明   
typedef int Int; //typedef 声明   
class bar; //类前置声明   
class bar; //类前置声明   
typedef int Int; //typedef 声明     
int foo(int,int); //函数前置声明  
在同一个作用域中你可以多次重复这些声明。

但是有两种声明不能重复，那就是类成员函数及静态数据成员的声明 
class foo    
{    
　static int i;    
　static int i;//不可以    
　public:    
int foo();    
int foo();//不可以    
};

2.定义
一个定义提供一个实体(类型、实例、函数)在一个作用域的唯一描述。
在同一作用域中不可重复定义一个实体。
要明确声明和定义的区别。

3.编译单元
当一个c或cpp文件在编译时，预处理器首先递归包含头文件，形成一个含有所有 必要信息的单个源文件,这个源文件就是一个编译单元。这个编译单元会被编译成为一个与cpp文件名同名的目标文件(.o或是.obj)。连接程序把不同编译单元中产生的符号联系起来，构成一个可执行程序。

4.内部连接：如果一个名称对于它的编译单元来说是局部的，并且在连接时不会与其它编译单元中的同样的名称相冲突，那么这个名称有内部连接(注：有时也将声明看作是无连接的，这里我们统一看成是内部连接的)。

以下情况有内部连接:
a)所有的声明
b)名字空间(包括全局名字空间)中的静态自由函数、静态友元函数、静态变量的定义
c)enum定义
d)inline函数定义(包括自由函数和非自由函数)
e)类的定义
f)名字空间中const常量定义
g)union的定义

外部连接:在一个多文件程序中，如果一个名称在连接时可以和其它编译单元交互，那么这个名称就有外部连接。
以下情况有外部连接:
a)类非inline函数总有外部连接。包括类成员函数和类静态成员函数
b)类静态成员变量总有外部连接。
c)名字空间(包括全局名字空间)中非静态自由函数、非静态友元函数及非静态变量
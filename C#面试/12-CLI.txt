1.本文研究C#语言编译和执行时都要依赖的公共语言基础结构CLI--Common Language Infrastructure。

2.C#生成的不是处理器直接解释的指令，而是一种中间语言指令，这种中间语言就是公共中间语言CIL--Common Intermediate Language。
第二个编译步骤通常在执行时发生，这个步骤中，CIL被转为处理器能理解的机器码，但是代码想要执行，仅仅转换成机器码是不够的。C#程序还必须要在一个代理的上下文中运行。
负责管理C#程序执行的代理就是虚拟执行系统(VES)，即“运行时”。“运行时”负责加载和运行程序，并在程序执行时提供额外的服务（如安全保障和垃圾回收等）。
CIL和“运行时”包含在一项国际性标准中，即所谓的公共语言基础结构。CLI是理解C#程序的执行环境以及C#如何与其他程序和库进行无缝交互的一个重要规范。

3.CLI的实现
每个CLI的实现都包含一个C#编译器和一套框架类库；
CLR：用于创建Windows客户端程序，是微软针对.NET平台实现的“运行时”。
Mono：Mono是开源的跨平台的CLI实现。

4.C#编译成机器码
由于C/C++之类的语言会直接编译成机器码，所以这些语言的平台都是底层操作系统与机器指令集，即windows，linux，unix等。
而C#的底层平台是VES，即“运行时”。
C#编译需要两个步骤
a.C#编译器将C#转换为CIL
b.将CIL转换为处理器能够执行的指令
VES能够理解CIL指令，并能将其编译为机器码，这个编译的组件就是即时编译器，JIT,just-in-timecompiler。程序安装或执行时，便可能发生JIT编译。
大多数CLI实现都偏向于执行时编译CIL，CLI甚至允许CIL解释执行，而不是编译执行，就像许多脚本程序一样。
.NET包含一个NGEN工具，此工具能在实际运行程序前将代码编译成机器码，好处在于可以避免程序启动时才进行JIT编译，以缩短程序的启动时间。

5.托管代码
VES将CIL代码编译为机器码并开始执行后，它依然会继续管理着代码的执行，在VES这样一个代理环境下执行的代码成为托管代码，在VES控制下的执行过程则称为托管执行。对执行的控制转向数据，数据就成为了托管数据，因为数据所需的内存是由“运行时”自动分配和回收的。之所以成为托管执行，是因为VES管理者诸如内存分配、安全检查和jit编译等方面，从而控制了主要的程序行为。
执行过程中不需要“运行时”的代码称为本机代码或非托管代码。

6.类型安全
VES提供的关键优势之一就是检查类型之间的转换，这就是VES的类型检查能力。
通过类型检查，VES能够防止程序员不慎引入可能造成缓冲区溢出安全漏洞的非法类型转换。
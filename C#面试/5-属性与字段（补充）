1.为什么会有属性？我们希望字段是只读的，也就是只能访问这个变量而不能修改，private和public等限定符同时限制了它的读写；再者，希望对变量赋值时有条件验证等；在java或其它语言中，我们通常会将一个变量来声明为一个私有变量，然后为其编写set和get方法；C#则用属性的概念显式支持这一编程模式。
2.属性是成员函数，不属于成员变量；
属性的关键特点在于：它提供了从编程角度看类似于字段的API，要明白属性的本质是API，只是这个API看起来很像字段，但是它并不是字段，这在外部是看不出来的；
3.自动实现的属性 public string Name{set;get;}="xxx"，set和get是自动实现的，它没有支持字段；自动实现的属性必须要get方法，可以没有set方法；我们给该属性设定了初始值，只有自动实现的属性才能设定初始值，即使没有set访问器也可以；
在set方法中，会经常遇到value关键字，赋值方法可以引用value关键字引用赋值操作符的右侧部分；
4.一个属性当中至少要有一个访问器，只有get就是只读属性，只有set就是只写属性，set和get都有就是允许读写；
5.编码规范，属性的首字母要大写，至于如果有为属性提供支持的私有字段，那就应该用添加下划线前缀，如Name和_Name，也就是要为支持字段和属性使用相同大小写风格，并为支持字段添加前缀；不要声明public或protected的字段，字段要声明为private，（字段是可以声明为只读的），而是应该使用属性来公开字段；要优先使用自动实现的属性而不是字段，属性可以设置只读或只写的权限，而字段（private）在类的内部是可以读和写的，当我们需要对外和对内拥有不同的读写权限时，比如声明了一个只写的属性，那么内部也不能访问该属性，就需要为该属性添加支持字段；
对于自动实现的属性而言，必须要有get方法，因为如果没有get方法，属性就会缺失了意义，它的数据无法被读取（不仅无法外部获取，内部也无法获取，因为自动实现的属性没有支持字段），但是对于一般属性而言，set方法中通常会给支持字段赋值，内部就可以通过支持字段访问，所以就不用想着有没有get访问器；
不能从包容属性外部访问属性所支持的字段，程序不需要使用readonly修饰符（readonly就是用来限制外部访问的），应该用只读属性来替代；
6.对于非自动实现的属性，一般都有支持字段，但是在为字段赋值时，一定要主要使用属性来赋值，不然的话，就可能出现不通过set函数验证的字段值；

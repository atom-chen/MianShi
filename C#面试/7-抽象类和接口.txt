一、抽象类
抽象类是仅供派生的类，无法实例化抽象类，只能实例化它派生的类。
定义抽象类和抽象成员时，要为其添加abstract修饰符。
不可实例化只是抽象类的一个次要的特征，其主要特征是它包含抽象成员。
抽象成员不能声明为私有，否则，派生类无法找到它们。

二、接口
1.和抽象类不同，接口不包含任何实现，而且，接口能把提供的服务和实现细节完全隔离开。
2.关键特点：既不包含实现，也不包含数据。注意其中的方法声明：他用一个分号代替了大括号，字段不能在接口声明中出现。
C#不允许接口成员使用访问修饰符。
接口永远不能实例化，不能使用new创建接口，所以接口没有构造器或终结器。

三、区别
抽象类与接口的区别在于：
抽象类是一个不完全的类，类里面有抽象的方法，属性，也可以有具体的方法和属性，需要进一步的专业化。
但接口是一个行为的规范，里面的所有东西都是抽象的！
一个类只可以继承一个基类也就是父类，但可以实现多个接口。
抽象类：派生类要么自己也是抽象的，要么实现所有的抽象成员，可声明属性和字段，单继承，
接口：实现类型必须实例化所有接口成员，可声明属性，不可声明字段，可实现任意多的接口。

四、C#为什么是单继承的，而接口可以多继承
当继承的两个类中有相同的方法时，子类调用时难以确定是哪个方法，多继承会出现C++中的菱形继承问题，所以java中摒弃了这一特性。
接口的多继承，即使两个接口可能会出现相同名称的方法，但是接口的方法都是抽象的，它的具体实现依赖于实现类，最终调用方法时调用的是实现类中的方法，所以就不会出现歧义。

五、接口和抽象类使用区别
应用的区别是基于它们在语法上的区别，两者最大的语法区别在于接口不包含任何实现，而抽象类是包含一些具体实现的，抽象类只是拥有部分抽象函数，换句话说，抽象类不仅仅允许共享签名，它还是允许共享实现的，但是接口就只是共享签名，而不是共享实现的。
抽象类表示的是，这个对象是什么。接口表示的是，这个对象能做什么。因此，当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。
而且C#是单继承的，基类只有一个，需要慎重使用。抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。

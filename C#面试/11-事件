1.委托本身是一个更大的模式的基本单位，这个模式称为发布-订阅。委托的使用及其对publish-subscribe模式的支持是需要学习的重点。虽然，很多问题都可以单独用委托来实现，但是事件构造提供了额外的“封装”，使publish-subscribe模式更容易实现，更不容易出错。

2.多播委托与观察者模式
观察者模式：需要将单一事件的通知广播给多个订阅者
一个委托值是可以引用一系列方法的，这些方法顺序调用，就是多播委托（multicast delegate）。利用多播委托，单一事件的通知就可以发布给多个订阅者。
示例：定义发布者和订阅者，（发布者里包含委托类型）然后将其联系起来，联系的方式就是使用+=来赋值，为委托注册订阅者，之后发布者和订阅者就联系起来了，然后要做的就是调用委托了，也就是去创建需要发布的信息。

3.事件的作用
a.封装订阅，如果使用赋值操作符将一个委托赋给另一个，那么就可能会出现意外的取消原订阅者
b.封装发布，事件确保只有包容类才能触发事件通知
而且普通委托很容易忘记在调用委托之前检查null值，这会引发一个非预期的异常值。但是通过event关键字提供的封装，可以在声明时采用一个替代方案，也就是赋值delegate{}，即空委托，这样就可以引发事件但不必检查是否有订阅者。

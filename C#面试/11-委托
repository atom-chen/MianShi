1.随着类与类之间关系的复杂，类与类之间的调用将会使用一些常见的模式。一种常见的模式是向方法传递对象，该方法再去调用该对象的一个方法。例如，向方法传递一个IComparere<int>的接口引用，这样就可以调用传入对象的Compare()方法。这种情况下，接口类型的作用只是向最终被调用的那个方法传递一个引用。

2.委托类似于函数指针，它允许捕捉对方法的引用，并像传递其它对象那样传递这个引用。
常见的一些应用模式：先定义一个委托类型，然后在函数里声明一个该类型的形参变量，之后在函数调用赋实参的时候委托捕捉引用，也就是传入一个和委托类型一致的方法名称。
或者，直接声明一个委托类型变量，使用相应函数为其赋值使其捕捉引用，然后执行该委托类型。

3.委托的内部机制
委托实际是特殊的类，所有的委托都必须直接或间接地派生自System.Delegate。

4.通用的委托    System.Func和System.Action系列
为了减少自定义委托类型的必要，.Net3.5包含了一组通用委托，其中大多数都是泛型。System.Func系列委托代表有返回值的方法，而System.Action系列代表返回void的方法。
注意：func委托的最后一个参数的类型必须是委托的返回类型。

委托没有结构相等性。

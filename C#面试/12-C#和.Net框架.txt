1..NET Framework主要有两个部分组成：一是公共语言运行时（Common Language Runtime，CLR）；二是.NET Framework类库（Framework Class Library，FCL）。

A.公共语言运行时（CLR）
它是.NET Framework的核心基础。我觉得可以把它看成是一个容器，在这个容器里面，它提供了内存管理，线程管理，异常处理，检查类型安全等服务。放在里面执行的代码叫做托管代码（managed code），没有放在里面执行的代码成为非托管代码（unmanaged code）。一般C#所写出来的代码都是托管代码

CLR包含两个组成部分：通用类型系统（Common Type System，CTS，上文有提及）和公共语言规范（Common Language Specification，CLS）。
CTS：C#和VB.NET是两种还有比较使用的语言，它们都是由CLR进行管理的，但是它们在语法和数据类型方面都是不一样的，CLR是怎样进行托管呢？CTS就是用来解决这个问题的，它解决了不同语言之间数据类型不同的问题，for example：C#中定义整型用int，而VB用的是Integer，很明显的不一样，通过CTS可以把这两个类型变成通用的Int32。所有的.NET Framework都共享这一类型系统，从而使它们可以实现无缝互操作。
CLS：刚才说到了CTS解决了数据类型的不一样，那CLS就是用来解决语法规范上的区别。CLS是一种最低的语言标准，它指定了以.NET平台为目标的语言所必须支持的最小特征，以及某一语言与其他.NET语言之间实现互操作所需要的完备特征。认识到这点很重要，这里讨论的特征问题已不仅仅是语言间的简单语法区别。例如，CLS并不去关心一种语言用什么关键字实现继承，只是关心该语言如何支持继承。CLS是CTS的一个子集。这就意味着一种语言特征可能符合CTS标准，但又超出CLS的范畴。例如：C#支持无符号数字类型，该特征能通过CTS的测试，但CLS却仅仅识别符号数字类型。因此，如果用户在一个组件中使用C#的无符号类型，就可能不能与不使用无符号类型的语言(如VB.NET)设计的.NET组件实现互操作。

B.NET Framework类库（FCL）
它是一组DLL程序集的集合，包含了大量定义好的类型以及功能。程序员可以利用这些功能，快速的进行出多种应用程序，比如WPF，Windows Form和ASP.NET应用程序。

2.C#是面向.NET Framework开发的语言。除了C#之外，VB.NET和F#也都是一样的。
打个比较经典的比喻吧：.NET Framework相当于是一艘航空母舰，在这艘舰艇上面可以搭载很多种型号的飞机，比如歼11（C#），海直八（VB.NET），空警200（F#）等。都可以在.NET Framework这艘航空母舰上运行。


3.API-应用程序接口
一个数据类型的所有方法定义了这种类型的应用程序接口。
例如，在.NET中，一个程序集包含的所有类型构成这个程序集的API，每个程序集的API组合在一起构成一个更大的API，这个更大的API组通常称为框架，.NET Framework就是指.NET包含的所有程序集对外暴露的API。
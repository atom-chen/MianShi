1.属性的正常写:
private string name;

public string Name {
get { return name; }
set { name = value; }
}

简写:(自动属性)
public string Name { get; set; }

然后 编译器 会转换成 正常写法
A.Property就是访问字段（成员变量，Field）提供的一种方式（set/get）
B.Property是C#中引入的一种语言特性，把C++中的一些编程技巧上升到语法的地位。这种特性就是把类数据成员声明为私有的，而提供公有的方法实现对他们的访问。
C.Property可以说是一个面向对象的概念，提供了对私有字段的访问封装，在C#中以get和set访问器方法实现对可读可写属性的操作，提供了安全和灵活的数据访问封装。


2.如果通过函数来修改私有变量的话，会影响类的可编程性。我们无法再用赋值操作符来设置类中的数据，也只能使用方法来访问数据。
所以，考虑到经常会用到这种编程模式，C#的设计者决定为它提供显式的语法支持，这种语法就是属性（Property）。
书写规范：考虑为支持字段和属性使用相同的大小写风格，为支持字段附加“_”前缀。

3.提供属性验证
在set函数里，提供属性验证，防止非法赋值。

4.属性与字段的区别
字段一般用在类的内部使用，属性一般供外部类访问。按照类的设计原则，字段都是private的，只能在类的内部使用，如果是public的，那么外部类谁都有可能访问，对字段进行破坏性的修改，这是我们不希望看到的，所以字段一定是private的。
属性想当于是给字段加了一个保护套，如果想读这个字段的值，属性里面走的一定是get{}，如果想给字段赋值，属性里一定走的是set{}，那么程序员可以在get{}和set{}中增加一些限制，验证要赋值的内容，或者让某个字段只能读不能赋值（对应该字段的的属性只让它有get{}，不写set{}）。
